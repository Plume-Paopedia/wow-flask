[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wow-flask"
version = "0.1.0"
description = "Portail communautaire de tutoriels World of Warcraft en franÃ§ais"
authors = [{name = "WoW Flask Team", email = "team@wowflask.fr"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core Flask
    "flask>=3.0.0",
    "flask-sqlalchemy>=3.1.0",
    "flask-migrate>=4.0.0",
    "flask-login>=0.6.0",
    "flask-wtf>=1.2.0",
    "wtforms>=3.1.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    
    # Authentication & Security
    "passlib>=1.7.4",
    "argon2-cffi>=23.0.0",
    "authlib>=1.3.0",
    "itsdangerous>=2.1.0",
    "flask-talisman>=1.1.0",
    "bleach>=6.1.0",
    
    # API & Serialization
    "flask-smorest>=0.42.0",
    "marshmallow>=3.20.0",
    "apispec>=6.4.0",
    
    # Email
    "flask-mailman>=1.0.0",
    
    # Caching & Rate Limiting
    "flask-caching>=2.1.0",
    "flask-limiter>=3.5.0",
    "redis>=5.0.0",
    
    # Internationalization
    "flask-babel>=4.0.0",
    "babel>=2.13.0",
    
    # Media & File Processing
    "pillow>=10.0.0",
    "boto3>=1.34.0",
    
    # Search
    "meilisearch>=0.31.0",
    
    # Background Tasks (optional)
    "celery>=5.3.0",
    
    # Utilities
    "python-slugify>=8.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    
    # Production Server
    "gunicorn>=21.2.0",
    
    # Environment & Configuration
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-flask>=1.3.0",
    "factory-boy>=3.3.0",
    "coverage>=7.3.0",
    
    # Linting & Formatting
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",
    "types-requests>=2.31.0",
    "types-redis>=4.6.0",
    "types-Pillow>=10.0.0",
    
    # Development Tools
    "flask-debugtoolbar>=0.13.0",
    "watchdog>=3.0.0",
]

admin = [
    "flask-admin>=1.6.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"migrations/*" = ["E501", "F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "celery.*",
    "meilisearch.*",
    "factory.*",
    "flask_admin.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]