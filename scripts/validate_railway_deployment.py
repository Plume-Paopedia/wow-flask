#!/usr/bin/env python3
"""
Script de validation du d√©ploiement Railway pour WoW Flask.
Teste que l'application peut d√©marrer correctement.
"""
import os
import sys
import subprocess
import time
import requests
from pathlib import Path

# Ajouter le r√©pertoire racine du projet au PYTHONPATH
script_dir = Path(__file__).parent
project_root = script_dir.parent
sys.path.insert(0, str(project_root))

def test_environment():
    """Test que l'environnement est correctement configur√©."""
    print("üîç Test de l'environnement...")
    
    # V√©rifier Python
    python_version = sys.version_info
    if python_version < (3, 11):
        print(f"‚ùå Python {python_version.major}.{python_version.minor} d√©tect√©, Python 3.11+ requis")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # V√©rifier les fichiers essentiels
    required_files = [
        "app/__init__.py",
        "wsgi.py",
        "requirements.txt",
        "Dockerfile",
        "Procfile",
        "entrypoint.sh",
        "railway.toml"
    ]
    
    for file in required_files:
        if not Path(file).exists():
            print(f"‚ùå Fichier manquant: {file}")
            return False
        print(f"‚úÖ {file}")
    
    return True

def test_dependencies():
    """Test que toutes les d√©pendances sont install√©es."""
    print("\nüì¶ Test des d√©pendances...")
    
    try:
        import flask
        print(f"‚úÖ Flask {flask.__version__}")
    except ImportError:
        print("‚ùå Flask non install√©")
        return False
    
    try:
        import gunicorn
        print(f"‚úÖ Gunicorn install√©")
    except ImportError:
        print("‚ùå Gunicorn non install√©")
        return False
    
    return True

def test_app_factory():
    """Test que l'application peut √™tre cr√©√©e."""
    print("\nüè≠ Test de l'app factory...")
    
    try:
        from app import create_app
        app = create_app()
        print(f"‚úÖ App cr√©√©e: {app.name}")
        print(f"‚úÖ Configuration: {app.config['FLASK_ENV']}")
        print(f"‚úÖ Blueprints: {list(app.blueprints.keys())}")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'app: {e}")
        return False

def test_gunicorn_syntax():
    """Test que la syntaxe Gunicorn est correcte."""
    print("\nü¶Ñ Test de la syntaxe Gunicorn...")
    
    try:
        # Test de la syntaxe du Procfile
        with open("Procfile", "r") as f:
            procfile_content = f.read().strip()
        
        print(f"‚úÖ Procfile: {procfile_content}")
        
        # V√©rifier que la syntaxe est correcte (devrait utiliser wsgi:app)
        if "wsgi:app" not in procfile_content:
            print("‚ùå Syntaxe incorrecte dans Procfile (devrait utiliser wsgi:app)")
            return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test Procfile: {e}")
        return False

def test_config_files():
    """Test que les fichiers de configuration sont valides."""
    print("\n‚öôÔ∏è  Test des fichiers de configuration...")
    
    # Test railway.toml
    try:
        with open("railway.toml", "r") as f:
            railway_config = f.read()
        print("‚úÖ railway.toml")
    except Exception as e:
        print(f"‚ùå Erreur railway.toml: {e}")
        return False
    
    # Test nixpacks.toml
    try:
        with open("nixpacks.toml", "r") as f:
            nixpacks_config = f.read()
        print("‚úÖ nixpacks.toml")
    except Exception as e:
        print(f"‚ùå Erreur nixpacks.toml: {e}")
        return False
    
    return True

def test_docker_build():
    """Test que l'image Docker peut √™tre construite."""
    print("\nüê≥ Test de construction Docker (optionnel)...")
    
    try:
        # V√©rifier si Docker est disponible
        result = subprocess.run(
            ["docker", "--version"], 
            capture_output=True, 
            text=True,
            timeout=10
        )
        
        if result.returncode != 0:
            print("‚ö†Ô∏è  Docker non disponible, test ignor√©")
            return True
        
        print("‚úÖ Docker disponible")
        
        # Test de construction (build seulement, pas de run)
        print("üî® Construction de l'image Docker...")
        result = subprocess.run(
            ["docker", "build", "-t", "wow-flask-test", "."],
            capture_output=True,
            text=True,
            timeout=300  # 5 minutes max
        )
        
        if result.returncode == 0:
            print("‚úÖ Image Docker construite avec succ√®s")
            
            # Nettoyer l'image de test
            subprocess.run(["docker", "rmi", "wow-flask-test"], capture_output=True)
            return True
        else:
            print(f"‚ùå Erreur construction Docker: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå Timeout lors de la construction Docker")
        return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  Docker non trouv√©, test ignor√©")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur Docker: {e}")
        return True  # Non bloquant

def main():
    """Fonction principale."""
    print("üöÄ Validation du d√©ploiement Railway pour WoW Flask")
    print("=" * 50)
    
    tests = [
        ("Environnement", test_environment),
        ("D√©pendances", test_dependencies),
        ("App Factory", test_app_factory),
        ("Syntaxe Gunicorn", test_gunicorn_syntax),
        ("Fichiers de config", test_config_files),
        ("Build Docker", test_docker_build),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # R√©sultats finaux
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS DES TESTS")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{test_name:20} : {status}")
        if result:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("\nüéâ Tous les tests sont pass√©s!")
        print("‚úÖ L'application est pr√™te pour le d√©ploiement Railway")
        print("\nüìù √âtapes suivantes:")
        print("1. Commitez vos changements")
        print("2. Pushez sur GitHub")
        print("3. Connectez votre repo √† Railway")
        print("4. Configurez les variables d'environnement")
        print("5. D√©ployez!")
        return 0
    else:
        print(f"\n‚ùå {total - passed} test(s) √©chou√©(s)")
        print("Corrigez les erreurs avant de d√©ployer")
        return 1

if __name__ == "__main__":
    exit(main())